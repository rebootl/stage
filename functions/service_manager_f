#!/usr/bin/bash
#

# a service shall start if:
# - it's not started already
# - all of it's dependencies are started

# Nodes
# -----
#
# using an assoziative array NODES to store the dependencies
#
# - keys: service name
# - values: space separated list of needed services names
# (--> must be done below, to cleanly unset between stage calls from boot/shutdown)
#declare -A NODES

make_nodes_recursive() {
    # add a node for $1 to the NODES array,
    # recurse into its needed dependencies
    #
    # - $2 needed / depend (for starting needed, for stopping depend)

    # (check if already done)
    local service
    for service in "${!NODES[@]}"; do
        if [ "$service" == "$1" ]; then
            return
        fi
    done

    local linked_services
    if [ "$2" == "needed" ]; then
        linked_services=$(get_needed_services $1)
    else
        linked_services=$(get_dependent_services $1)
    fi

    NODES["$1"]="$linked_services"

    local linked_service
    for linked_service in $linked_services; do
        make_nodes_recursive $linked_service $2
    done
}

start_recursive() {
    # start service $1 (if all needed services are started),
    # recurse into the succeeding services

    # (check if all needed deps are executed)
    local needed_service
    for needed_service in ${NODES[$1]}; do
        if [ ! -f "$RTAB_DIR/$needed_service" ]; then
            echo "$1: Returning..."
            return
        fi
    done

    # service start routine
    echo "$1: Starting..."
    # (check if already running)
    (poll_service $1)
    if [ "$?" == 0 ]; then
        echo "$1: Already running."
        # (set as started)
        touch "$RTAB_DIR/$1"
    else
        # (start service)
        local result
        result=$(start_service $1)
        if [ "$?" == 0 ]; then
            # (set as started)
            touch "$RTAB_DIR/$1"
            echo "$1: Started."
            echo "$result" > $OUT_DIR/${1}_out
        else
            echo "$1: Failed: Final start failed, returning immediately..."
            echo "  Output:"
            echo "  ======="
            while read -r line; do
                echo "  $line"
            done <<< "$result"
            echo "$result" > $OUT_DIR/${1}_out
            return 1
        fi
    fi

    # (launch the succesors)
    local service
    for service in "${!NODES[@]}"; do
        if [[ "${NODES[$service]}" =~ "$1" ]]; then
            echo "$1: Launching succesor: $service"
            start_recursive "$service" &
        fi
    done
    wait
}

stop_recursive() {
    # stop service $1 (if all dependent services are stopped),
    # recurse into the preceding services

    # (check if all dependent services are stopped)
    local dependent_service
    for dependent_service in ${NODES[$1]}; do
        if [ ! -f "$RTAB_DIR/$dependent_service" ]; then
            echo "$1: Returning..."
            return
        fi
    done

    # service stop routine
    echo "$1: Stopping..."
    # (check if running)
    (poll_service $1)
    if [ "$?" == 1 ]; then
        echo "$1: Already stopped."
        # (set as stopped)
        touch "$RTAB_DIR/$1"
    else
        # (stop service)
        local result
        result=$(stop_service $1)
        if [ "$?" == 0 ]; then
            # (set as stopped)
            touch "$RTAB_DIR/$1"
            echo "$1: Stopped."
            echo "$result" > $OUT_DIR/${1}_out
        else
            echo "$1: Failed: Final stop failed, returning immediately..."
            echo "  Output:"
            echo "  ======="
            while read -r line; do
                echo "  $line"
            done <<< "$result"
            echo "$result" > $OUT_DIR/${1}_out
            return 1
        fi
    fi

    # (launch the predecessors)
    local service
    for service in "${!NODES[@]}"; do
        if [[ "${NODES[$service]}" =~ "$1" ]]; then
            echo "$1: Stopping predecessors: $service"
            stop_recursive "$service" &
        fi
    done
    wait
}

make_nodes() {
    # helper to call make nodes recursive
    #
    # - $1 list of services
    # - $2 needed/depend

    # (clean up state directory)
#    ls $RTAB_DIR | while read -r file; do
    local file
    for file in $(ls $RTAB_DIR); do
        rm $RTAB_DIR/$file
    done

    # (clean up array)
    unset NODES
    declare -Ag NODES

    local service
    for service in $1; do
        make_nodes_recursive "$service" $2
    done

    echo "Nodes:"
    echo "------"

    for service in "${!NODES[@]}"; do
        echo -n "Key: $service"
        echo " --> ${NODES[$service]}"
    done

    echo "-------------------------"
}

dep_call_start() {
    # start services in $1

    make_nodes "$1" "needed"

    local service
    for service in "${!NODES[@]}"; do
        start_recursive "$service" &
    done
    wait
}

dep_call_stop() {
    # stop services in $1

    make_nodes "$1" "depend"

    local service
    for service in "${!NODES[@]}"; do
        stop_recursive "$service" &
    done
    wait
}

dep_call() {
    # start/stop ($1) services in $2

    if [ "$1" == "start" ]; then
        dep_call_start "$2"
    else
        dep_call_stop "$2"
    fi

}
